import pyautogui
import serial
import keyboard
import math
import time

d1 = {'x_off':10,
        'y_off':-200,
        'correct_state':False,
        'precise':False,
        'duration':0.1,
        'enbl':True,
        'loop':True
        }

def disable(*_):
    d1['loop'] = False

def disable_soft(*_):
    d1['enbl'] = not d1['enbl']

def correct_off_state(*_):
    d1['correct_state'] = True
def precise_state():
    d1['precise'] = not d1['precise']
def data_sp(s):
    a = []
    for i in str(s).split():
        try:
            a.append(float(i))
        except:
            return
    return a
dist = 0.1
def mouse_x(x1,x2,t,lim):
    dx = abs(x1-x2)
    if dx > lim:
        if x1-x2 > 0:
            dir = 1
        else:
            dir = -1
        print(t,dx)
        return 1*dir

lim = 0.1
MX = 0.188349
def mouse_x2(x1,x2):
    x = MX*x1
    if abs(x1-x2) > lim:
        return x

def mouse_x3(x_val,x1,x2,y1,y2):
    # -80 , 80 , 0 , 1920
    return y1 + (x_val - x1) * (y2 - y1) / (x2 - x1)

def deNoise(x1,x2,y1,y2):
    # TODO de noising of input
    # increase rate of input
    pass

def main(comport, baudrate):
    curr = []
    prev = []
    temp = -1
    ser = serial.Serial(comport, baudrate,timeout=0.2)         
    # 1/timeout is the frequency at which the port is read 
    keyboard.add_hotkey('`',disable)
    keyboard.add_hotkey('/',disable_soft)
    keyboard.add_hotkey('*',correct_off_state)
    keyboard.add_hotkey('.',precise_state)
    while d1['loop']:
        s1 = time.time_ns()
        data = ser.readline().decode().strip()
        if data and d1['enbl']:
            curr = data_sp(data)
            try:
                x_angle = (curr[0] - curr[2])/2
                y_angle = (curr[1] + curr[3])/2
                x = (mouse_x3(x_angle,65,-60,0,1920)) - d1['x_off']
                y = (mouse_x3(y_angle,40,-40,0,1080)) - d1['y_off']
                if d1['precise']:
                    x /= 2
                    y /= 2
                if d1['correct_state']:
                    if temp == 0:
                        d1['x_off'] = x - prev[0]
                        d1['y_off'] = y - prev[1]
                        prev.clear()
                        temp = -1
                        d1['correct_state'] = False
                        print(d1)
                    elif temp == -1:
                        prev = [x, y]
                        temp = 10
                        time.sleep(1)
                        continue
                    else:
                        temp -= 1
                        continue
                
                #print(f"{x:.2f} {y:.2f}")
                pyautogui.moveTo(x=x,y=y, duration=0)
                prev = curr
            except:
                pass
            print(time.time_ns()-s1)
            
        

if __name__ == '__main__':
    main('COM4', 115200)
    


